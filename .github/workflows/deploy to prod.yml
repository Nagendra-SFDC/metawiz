name: DeployToPROD

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: |
          Enter the release branch (e.g., release/v1.2.3). 
          CAUTION: This workflow deploys directly to PRODUCTION. Changes will affect your live Salesforce org and may impact users, data, or processes. Ensure you have tested in a sandbox, backed up your org, and reviewed changes before proceeding.
        required: true
        default: "release/latest"  # Default branch if not specified

jobs:
  Deploy-to-PROD-environment:
    runs-on: ubuntu-latest
    environment: PROD
    steps:
      - name: 'Setup Node.js'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 'Checkout source code'
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.inputs.release_branch }}'  # Uses input branch
          fetch-depth: 2

      - name: 'Install Salesforce CLI'
        run: npm install @salesforce/cli --global

      - name: 'Install sfdx git delta'
        run: |
          echo Y | sfdx plugins:install sfdx-git-delta
          sfdx plugins

      - name: 'Authenticate Salesforce'
        run: |
          echo "${{ secrets.QA_SERVER_KEY }}" | tr -d '\r' > server.key
          sf org login jwt --username "${{ secrets.QA_ADMIN_USER }}" --jwt-key-file server.key --client-id "${{ secrets.QA_CONSUMER_KEY}}" --instance-url "${{ secrets.QA_INSTANCE_URL }}" --set-default

      - name: 'Create delta packages between main and input release branch'
  run: |
    git fetch origin main
    mkdir -p changed-sources
    sf sgd source delta \
      --to "refs/remotes/origin/${{ github.event.inputs.release_branch }}" \
      --from "origin/main" \
      --output "changed-sources" \
      --generate-delta \
      --source "force-app/main/default"
    echo "[INFO] Delta created between origin/main and ${{ github.event.inputs.release_branch }}"


      - name: 'Extract Test Class Names'
        run: |
          if [[ -f "manifest/Testpackage.xml" ]]; then
            TEST_CLASSES=$(grep -oP '(?<=<members>).*?(?=</members>)' manifest/Testpackage.xml | grep "Test" || true)
            if [[ -z "$TEST_CLASSES" ]]; then
              echo "No Test Classes Found. Skipping Tests."
              echo "TEST_CLASS_LIST=" >> $GITHUB_ENV
            else
              TEST_CLASS_LIST=$(echo $TEST_CLASSES | tr '\n' ',' | sed 's/,$//')
              echo "TEST_CLASS_LIST=$TEST_CLASS_LIST" >> $GITHUB_ENV
              echo "Extracted Test Classes: $TEST_CLASS_LIST"
            fi
          else
            echo "Testpackage.xml not found. Skipping Tests."
            echo "TEST_CLASS_LIST=" >> $GITHUB_ENV
          fi

     - name: 'Deploy to PROD with Extracted Test Classes'
        run: |
    sf project deploy start --source-dir changed-sources/force-app \
      --test-level RunSpecifiedTests \
      --tests $TEST_CLASS_LIST \
      --wait 10 \
      --json > result.json || echo "DEPLOY_FAILED=true" >> $GITHUB_ENV

      - name: 'Debug JSON Output'
        run: |
          cat result.json

      - name: 'Install jq (For JSON Parsing)'
        run: sudo apt-get install -y jq

      - name: 'Parse Deployment Results'
        run: |
          TEST_RUN=$(jq -r '.result.details.runTestResult.numTestsRun // 0' result.json)
          CLASSES_DEPLOYED=$(jq -r '.result.details.componentSuccesses | length' result.json)
          echo "Tests Run: $TEST_RUN"
          echo "Total Classes Deployed: $CLASSES_DEPLOYED"
          if [[ "$TEST_RUN" -eq "0" && -n "$TEST_CLASS_LIST" ]]; then
            echo "No tests were executed despite test classes being specified! Failing the job."
            exit 1
          fi
          if [[ "$DEPLOY_FAILED" == "true" ]]; then
            echo "Deployment failed. Check logs for details."
            exit 1
          fi

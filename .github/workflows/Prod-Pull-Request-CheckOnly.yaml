name: Prod-Pull-Request-CheckOnly

on:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]
    branches: [main]

jobs:
  ProdPullRequestCheckOnly:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Checking if package file exists
        run: |
          packageFileName="manifest/package.xml"
          echo "Using package file: $packageFileName"

          if [[ -f $packageFileName ]]; then
            echo "The package file exists, continuing the process!"
          else
            echo "The package file does not exist, failing process!"
            exit 1
          fi

          echo "PACKAGE_FILE_NAME=$packageFileName" >> $GITHUB_ENV;

      - name: Fix npm Dependency Issues (ERESOLVE)
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install eslint@8 --save-dev
          npm install --legacy-peer-deps

      - name: Install xml2js (for extracting test class names)
        run: npm install xml2js --legacy-peer-deps

      - name: Extract test class names ending with 'Test'
        run: |
          node - <<EOF
          const fs = require('fs');
          const xml2js = require('xml2js');

          const filePath = process.env.PACKAGE_FILE_NAME;
          fs.readFile(filePath, (err, data) => {
              if (err) {
                  console.error("Error reading package.xml:", err);
                  process.exit(1);
              }

              xml2js.parseString(data, (err, result) => {
                  if (err) {
                      console.error("Error parsing XML:", err);
                      process.exit(1);
                  }

                  const members = result.Package.types.find(t => t.name.includes("ApexClass"))?.members || [];
                  const testClasses = members.filter(c => c.match(/Test$/)).join(',');

                  if (testClasses) {
                      console.log("Identified test classes:", testClasses);
                      console.log(`SFDX_RUN_TEST_LEVEL=--test-level RunSpecifiedTests --tests ${testClasses}`); 
                      console.log(`SFDX_SPECIFIC_TEST_FOUND=${testClasses}`);
                      fs.appendFileSync(process.env.GITHUB_ENV, `SFDX_RUN_TEST_LEVEL=--test-level RunSpecifiedTests --tests ${testClasses}\n`);
                  } else {
                      console.log("No test classes found, using NoTestRun.");
                      fs.appendFileSync(process.env.GITHUB_ENV, "SFDX_RUN_TEST_LEVEL=-l NoTestRun\n");
                  }
              });
          });
          EOF

      - name: Install sfdx CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz -q
          mkdir sfdx
          tar xJf sfdx-linux-x64.tar.xz -C sfdx --strip-components 1
          echo "sfdx/bin" >> $GITHUB_PATH

      - name: Login to Salesforce Org
        env:
          DEPLOYMENT_USER: ${{ secrets.PROD_USER_ADMIN }}
          CONSUMER_KEY: ${{ secrets.PROD_CONSUMER_KEY }}
          INSTANCE_URL: ${{ secrets.PROD_INSTANCE_URL }}
          SERVER_KEY_CERTIFICATE: ${{ secrets.JWT_SERVER_KEY }}
        run: |
          mkdir -p JWT
          echo "$SERVER_KEY_CERTIFICATE" > ./JWT/connectionFile
          sf org login jwt --client-id $CONSUMER_KEY --jwt-key-file JWT/connectionFile --username $DEPLOYMENT_USER --set-default --instance-url $INSTANCE_URL --alias DeploymentOrg
          rm -rf JWT

      - name: Running the validation
        run: |
          echo "Checking CLI version"
          sf -v

          sf project deploy start --dry-run --manifest "${{ env.PACKAGE_FILE_NAME }}" -w 60 ${{ env.SFDX_RUN_TEST_LEVEL }}

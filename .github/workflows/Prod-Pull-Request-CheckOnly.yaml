name: Prod-Pull-Request-CheckOnly

on:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]
    branches: [main]

jobs:
  ProdPullRequestCheckOnly:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Checking if package file exists
        run: |
          packageFileName="manifest/package.xml"
          if [[ -f $packageFileName ]]; then
            echo "PACKAGE_FILE_NAME=$packageFileName" >> $GITHUB_ENV
          else
            echo "::error::Package file missing!"
            exit 1
          fi

      - name: Install dependencies
        run: |
          npm install -g @salesforce/cli@latest
          npm install xml2js --legacy-peer-deps

      - name: Extract Test Classes from Package
        id: extract-tests
        run: |
          node <<EOF
          const fs = require('fs');
          const xml2js = require('xml2js');

          const packageFile = process.env.PACKAGE_FILE_NAME;
          const xmlData = fs.readFileSync(packageFile, 'utf-8');

          xml2js.parseString(xmlData, (err, result) => {
            if (err) throw err;

            const testClasses = [];
            const types = result.Package.types || [];
            
            types.forEach(type => {
              if (type.name && type.name[0] === 'ApexClass') {
                const members = type.members || [];
                members.forEach(member => {
                  if (member.endsWith('Test')) {
                    testClasses.push(member);
                  }
                });
              }
            });

            console.log('Identified Test Classes:', testClasses);
            fs.appendFileSync(process.env.GITHUB_ENV, 
              `TEST_CLASSES=${testClasses.join(',')}\n`);
          });
          EOF

      - name: Configure JWT Auth
        env:
          DEPLOYMENT_USER: ${{ secrets.PROD_USER_ADMIN }}
          CONSUMER_KEY: ${{ secrets.PROD_CONSUMER_KEY }}
          INSTANCE_URL: ${{ secrets.PROD_INSTANCE_URL }}
          SERVER_KEY_CERTIFICATE: ${{ secrets.JWT_SERVER_KEY }}
        run: |
          mkdir -p ./jwt
          echo "$SERVER_KEY_CERTIFICATE" | base64 -d > ./jwt/server.key
          sf org login jwt \
            --client-id $CONSUMER_KEY \
            --jwt-key-file ./jwt/server.key \
            --username $DEPLOYMENT_USER \
            --instance-url $INSTANCE_URL \
            --alias DeploymentOrg

      - name: Validate Deployment with Tests
        run: |
          if [[ -n "$TEST_CLASSES" ]]; then
            echo "üîÑ Running specified test classes: $TEST_CLASSES"
            sf project deploy validate \
              --manifest $PACKAGE_FILE_NAME \
              --test-level RunSpecifiedTests \
              --tests $TEST_CLASSES \
              --wait 30
          else
            echo "‚ö†Ô∏è No specific test classes found. Running all local tests."
            sf project deploy validate \
              --manifest $PACKAGE_FILE_NAME \
              --test-level RunLocalTests \
              --wait 30
          fi

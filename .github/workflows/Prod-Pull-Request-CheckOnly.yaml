name: Prod-Pull-Request-CheckOnly
on:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]
    branches: [main]

jobs:
  ProdPullRequestCheckOnly:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Checking if package file exists
        run: |
          packageFileName="manifest/package.xml"
          packageTestFileName="manifest/packageTest.xml"

          echo "Using package file: $packageFileName"
          echo "Using test package file: $packageTestFileName"

          if [[ -f $packageFileName  ]]; then
            echo "The package file exists, continuing the process!"
          else
            echo "The package file does not exist, failing process!"
            exit 1
          fi

          echo "Checking for destructive changes"
          destructivePreName="manifestDestructive/packagePre.xml"
          destructivePosName="manifestDestructive/packagePos.xml"

          if [[ -f $destructivePreName ]]; then
            echo "Found destructive pre-deployment file: $destructivePreName"
            DESTRUCTIVE_PRE_DEPLOY=$destructivePreName
          else
            DESTRUCTIVE_PRE_DEPLOY=""
          fi

          if [[ -f $destructivePosName ]]; then
            echo "Found destructive post-deployment file: $destructivePosName"
            DESTRUCTIVE_POS_DEPLOY=$destructivePosName
          else
            DESTRUCTIVE_POS_DEPLOY=""
          fi

          echo "DESTRUCTIVE_PRE_DEPLOY=$DESTRUCTIVE_PRE_DEPLOY" >> $GITHUB_ENV;
          echo "DESTRUCTIVE_POS_DEPLOY=$DESTRUCTIVE_POS_DEPLOY" >> $GITHUB_ENV;
          echo "PACKAGE_FILE_NAME=$packageFileName" >> $GITHUB_ENV;
          echo "TEST_PACKAGE_FILE_NAME=$packageTestFileName" >> $GITHUB_ENV;

      - name: Installing xml2js
        run: npm install xml2js

      - name: Reading package test classes
        run: |
          node ./scripts/js/readNamedApexTestClass.js "${{ env.PACKAGE_FILE_NAME }}" "${{ env.TEST_PACKAGE_FILE_NAME }}"

      - name: Check if process should continue
        run: |
          if [ "${{ env.CONTINUE_PROCESS }}" == "Is missing" ]
          then
            echo "Process needs to stop due to missing test package file ${{ env.TEST_PACKAGE_FILE_NAME }}."
            exit 1
          fi

      - name: Defining the test command
        run: |
          if [ -z "${{ env.SFDX_SPECIFIC_TEST_FOUND }}" ]
          then
            SFDX_RUN_TEST_LEVEL="-l NoTestRun"
          else
            SFDX_RUN_TEST_LEVEL="-l RunSpecifiedTests --tests ${{ env.SFDX_SPECIFIC_TEST_FOUND }}"
          fi
          echo "SFDX_RUN_TEST_LEVEL=$SFDX_RUN_TEST_LEVEL" >> $GITHUB_ENV;

      - name: Install sfdx CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz -q
          mkdir sfdx
          tar xJf sfdx-linux-x64.tar.xz -C sfdx --strip-components 1
          echo "sfdx/bin" >> $GITHUB_PATH

      - name: Login to Salesforce Org
        env:
          DEPLOYMENT_USER: ${{ secrets.PROD_USER_ADMIN }}
          CONSUMER_KEY: ${{ secrets.PROD_CONSUMER_KEY }}
          INSTANCE_URL: ${{ secrets.PROD_INSTANCE_URL }}
          SERVER_KEY_CERTIFICATE: ${{ secrets.JWT_SERVER_KEY }}
        run: |
          mkdir -p JWT
          echo "$SERVER_KEY_CERTIFICATE" > ./JWT/connectionFile
          sf org login jwt --client-id $CONSUMER_KEY --jwt-key-file JWT/connectionFile --username $DEPLOYMENT_USER --set-default --instance-url $INSTANCE_URL --alias DeploymentOrg
          rm -rf JWT

      - name: Running the validation
        run: |
          echo "Checking CLI version"
          sf -v

          rm -rf Deploy
          mkdir Deploy

          if [[ -z "${{ env.DESTRUCTIVE_PRE_DEPLOY }}" ]]; then
            echo "No destructive pre-deployment steps defined!"
          else
            destructivePreFileName="Deploy/destructiveChangesPre.xml"
            cp "${{ env.DESTRUCTIVE_PRE_DEPLOY }}" "$destructivePreFileName"
            FINAL_DESTRUCTIVE_PRE_DEPLOY="--pre-destructive-changes $destructivePreFileName"
          fi

          sf project deploy start --dry-run --manifest "${{ env.PACKAGE_FILE_NAME }}" -w 60 ${{ env.SFDX_RUN_TEST_LEVEL }} ${FINAL_DESTRUCTIVE_PRE_DEPLOY}

name: Prod-Pull-Request-CheckOnly
on:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]
    branches: [main]

jobs:
  ProdPullRequestCheckOnly:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Checking the branch and the package file
        run: |
          fullName=${{ github.head_ref }}
          echo "Full branch name: $fullName"

          # Extracting meaningful branch name
          finalBranchName=$(echo "$fullName" | awk -F'/' '{print $NF}')
          echo "Final branch name: $finalBranchName"

          packageFileName="manifest/package-$finalBranchName.xml"
          packageTestFileName="manifest/packageTest-$finalBranchName.xml"

          echo "Checking if the package file exists..."
          if [[ -f $packageFileName ]]; then
            echo "Package file exists. Continuing the process!"
          else
            echo "Error: The package file does not exist! Exiting..."
            exit 1
          fi

          # Define environment variables for later steps
          echo "PACKAGE_FILE_NAME=$packageFileName" >> $GITHUB_ENV
          echo "TEST_PACKAGE_FILE_NAME=$packageTestFileName" >> $GITHUB_ENV

      - name: Installing dependencies
        run: npm install xml2js

      - name: Reading package test classes
        run: |
          node ./scripts/js/readNamedApexTestClass.js "${{ env.PACKAGE_FILE_NAME }}" "${{ env.TEST_PACKAGE_FILE_NAME }}"

      - name: Check if process should continue
        run: |
          if [ ! -f "${{ env.TEST_PACKAGE_FILE_NAME }}" ]; then
            echo "No test package file found, skipping tests..."
            echo "SFDX_RUN_TEST_LEVEL=-l NoTestRun" >> $GITHUB_ENV
          else
            echo "Test package file found."
          fi

      - name: Set test execution strategy
        run: |
          if [ -z "${{ env.SFDX_SPECIFIC_TEST_FOUND }}" ]; then
            echo "No specific test classes found."
            SFDX_RUN_TEST_LEVEL="-l NoTestRun"
          else
            echo "Running specific test classes: ${{ env.SFDX_SPECIFIC_TEST_FOUND }}"
            SFDX_RUN_TEST_LEVEL="-l RunSpecifiedTests --tests ${{ env.SFDX_SPECIFIC_TEST_FOUND }}"
          fi
          echo "SFDX_RUN_TEST_LEVEL=$SFDX_RUN_TEST_LEVEL" >> $GITHUB_ENV

      - name: Install Salesforce CLI
        run: |
          wget -q https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir sfdx
          tar xJf sfdx-linux-x64.tar.xz -C sfdx --strip-components 1
          echo "sfdx/bin" >> $GITHUB_PATH

      - name: Login to Salesforce
        env:
          DEPLOYMENT_USER: ${{ secrets.PROD_USER_ADMIN }}
          CONSUMER_KEY: ${{ secrets.PROD_CONSUMER_KEY }}
          INSTANCE_URL: ${{ secrets.PROD_INSTANCE_URL }}
          SERVER_KEY_CERTIFICATE: ${{ secrets.JWT_SERVER_KEY }}
        run: |
          mkdir -p JWT
          echo "$SERVER_KEY_CERTIFICATE" > ./JWT/connectionFile
          sf org login jwt --client-id $CONSUMER_KEY --jwt-key-file JWT/connectionFile --username $DEPLOYMENT_USER --set-default --instance-url $INSTANCE_URL --alias DeploymetOrg
          rm -rf JWT

      - name: Running the validation
        if: github.event.pull_request.merged == false
        run: |
          echo "Checking CLI version..."
          sf -v

          rm -rf Deploy
          mkdir Deploy

          echo "Executing validation with test level: $SFDX_RUN_TEST_LEVEL"

          sf project deploy start --dry-run --manifest "${{ env.PACKAGE_FILE_NAME }}" -w 60 $SFDX_RUN_TEST_LEVEL

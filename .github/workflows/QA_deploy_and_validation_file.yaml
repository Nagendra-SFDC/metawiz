name: QA DEPLOY AND VALIDATION

on:
  push:
    branches: [ QA ]
  pull_request:
    branches: [ QA ]

  workflow_dispatch:
    inputs:
      rollback:
        description: "this is deploy and run test classes version"
        required: false
        default: "false"

jobs:
  Deploy-to-QA-environment:
    runs-on: ubuntu-latest
    environment: sffnoobs
    steps:
      - name: 'Setup Node.js'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 'Checkout source code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: 'Install Salesforce CLI'
        run: npm install @salesforce/cli --global

      - name: 'Install sfdx git delta'
        run: |
          echo Y | sfdx plugins:install sfdx-git-delta
          sfdx plugins

      - name: 'Authenticate Salesforce'
        run: |
          echo "${{ secrets.JWT_SERVER_KEY }}" | tr -d '\r' > server.key
          sf org login jwt --username "${{ secrets.QA_ADMIN_USER }}" --jwt-key-file server.key --client-id "${{ secrets.QA_CONSUMER_KEY }}" --instance-url "${{ secrets.QA_INSTANCE_URL }}" --set-default

      - name: 'Create delta packages'
        run: | 
          mkdir -p changed-sources
          sf sgd source delta --to "HEAD" --from "HEAD~1" --output changed-sources/ --generate-delta --source force-app/main/default/
          echo "[INFO] Diff generated"

      - name: 'Extract Test Class Names from manifest/Testpackage.xml'
        run: |
          TEST_CLASSES=$(grep -oP '(?<=<members>).*?(?=</members>)' manifest/Testpackage.xml | grep "Test")
          TEST_CLASS_LIST=$(echo $TEST_CLASSES | tr '\n' ',' | sed 's/,$//')
          NUM_TEST_CLASSES=$(echo "$TEST_CLASSES" | wc -l)
          echo "TEST_CLASS_LIST=$TEST_CLASS_LIST" >> $GITHUB_ENV
          echo "NUM_TEST_CLASSES=$NUM_TEST_CLASSES" >> $GITHUB_ENV
          echo "Extracted $NUM_TEST_CLASSES test classes: $TEST_CLASS_LIST"

      - name: 'Deploy to Salesforce'
        run: |
          sf project deploy start --source-dir force-app \
            --test-level NoTestRun --wait 10 --ignore-conflicts --json > result.json || echo "DEPLOY_FAILED=true" >> $GITHUB_ENV
        shell: bash
        continue-on-error: true

      - name: 'Debug JSON Output'
        run: |    
          cat result.json

      - name: 'Install jq (For JSON Parsing)'
        run: sudo apt-get install -y jq

      - name: 'Parse Test Results'
        run: |
          DEPLOY_STATUS=$(jq -r '.status' result.json)
          if [[ "$DEPLOY_STATUS" -eq "0" ]]; then
            echo "✅ Deployment Successful!"
            exit 0
          else
            echo "❌ Deployment Failed!"
            exit 1
          fi

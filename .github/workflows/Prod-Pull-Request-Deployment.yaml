name: Deploy to sffnoobs environment on push to main

on:
  

jobs:
  Deploy-to-sffnoobs-environment:
    runs-on: ubuntu-latest
    environment: sffnoobs
    steps:
      - name: 'Setup Node.js'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 'Checkout source code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: 'Install Salesforce CLI'
        run: npm install @salesforce/cli --global

      - name: 'Install sfdx git delta'
        run: |
          echo Y | sfdx plugins:install sfdx-git-delta
          sfdx plugins

      - name: 'Backup Current Deployment Before Deploying'
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          ROLLBACK_BRANCH="rollback-$TIMESTAMP"

          # Configure GitHub authentication
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"

          # Ensure we are on the main branch before creating a rollback branch
          git checkout main

          # Create rollback branch
          git checkout -b $ROLLBACK_BRANCH

          # Push rollback branch
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git $ROLLBACK_BRANCH
          
          echo "[INFO] Backup branch $ROLLBACK_BRANCH created."

      - name: 'Authenticate Salesforce'
        run: |
          echo "${{ secrets.JWT_SERVER_KEY }}" | tr -d '\r' > server.key
          sf org login jwt --username "${{ secrets.PROD_USER_ADMIN }}" --jwt-key-file server.key --client-id "${{ secrets.PROD_CONSUMER_KEY }}" --instance-url "${{ secrets.PROD_INSTANCE_URL }}" --set-default

      - name: 'Create delta packages'
        run: | 
          mkdir -p changed-sources
          sf sgd source delta --to "HEAD" --from "HEAD~1" --output changed-sources/ --generate-delta --source force-app/main/default/
          echo "[INFO] Diff generated"

      - name: 'Extract Test Class Names from manifest/Testpackage.xml'
        run: |
          TEST_CLASSES=$(grep -oP '(?<=<members>).*?(?=</members>)' manifest/Testpackage.xml | grep "Test")
          TEST_CLASS_LIST=$(echo $TEST_CLASSES | tr '\n' ',' | sed 's/,$//')
          NUM_TEST_CLASSES=$(echo "$TEST_CLASSES" | wc -l)
          echo "TEST_CLASS_LIST=$TEST_CLASS_LIST" >> $GITHUB_ENV
          echo "NUM_TEST_CLASSES=$NUM_TEST_CLASSES" >> $GITHUB_ENV
          echo "Extracted $NUM_TEST_CLASSES test classes: $TEST_CLASS_LIST"

      - name: 'Validate Entire PR (Dry Run) with Extracted Test Classes'
        run: |
          sf project deploy start --source-dir force-app \
            --test-level RunSpecifiedTests --tests $TEST_CLASS_LIST --dry-run --wait 10 --json > result.json || echo "DEPLOY_FAILED=true" >> $GITHUB_ENV

      - name: 'Debug JSON Output'
        run: |
          cat result.json

      - name: 'Install jq (For JSON Parsing)'
        run: sudo apt-get install -y jq

      - name: 'Parse Test Results'
        run: |
          TEST_RUN=$(jq -r '.result.details.runTestResult.numTestsRun // 0' result.json)
          CLASSES_DEPLOYED=$(jq -r '.result.details.componentSuccesses | length' result.json)
          echo "Tests Run: $TEST_RUN"
          echo "Number of Test Classes Executed: $NUM_TEST_CLASSES"
          echo "Total Classes Deployed: $CLASSES_DEPLOYED"
          if [[ "$TEST_RUN" -eq "0" ]]; then
            echo "No tests were executed! Failing the job."
            exit 1
          fi

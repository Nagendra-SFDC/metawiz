name: Prod-Pull-Request-Deployment

on:
  push:
    branches: [ main ]
  
  workflow_dispatch:  # Allows manual rollback trigger
    inputs:
      rollback:
        description: "Rollback to previous version"
        required: false
        default: "false"

jobs:
  Deploy-to-sffnoobs-environment:
    runs-on: ubuntu-latest
    environment: sffnoobs
    steps:
      - name: 'Setup Node.js'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 'Checkout source code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: 'Install Salesforce CLI'
        run: npm install @salesforce/cli --global

      - name: 'Install sfdx git delta'
        run: |
          echo Y | sfdx plugins:install sfdx-git-delta
          sfdx plugins

      - name: 'Backup Current Deployment Before Deploying'
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          ROLLBACK_BRANCH="rollback-$TIMESTAMP"

          # Configure GitHub authentication
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"

          # Ensure we are on the main branch before creating a rollback branch
          git checkout main

          # Create rollback branch
          git checkout -b $ROLLBACK_BRANCH

          # Push rollback branch
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git $ROLLBACK_BRANCH
          
          echo "[INFO] Backup branch $ROLLBACK_BRANCH created."

    
      - name: 'Authenticate Salesforce'
        run: |
          echo "${{ secrets.JWT_SERVER_KEY }}" | tr -d '\r' > server.key
          sf org login jwt --username "${{ secrets.DEPLOYMENT_USER_NAME }}" --jwt-key-file server.key --client-id "${{ secrets.CONSUMER_KEY }}" --instance-url "${{ secrets.INSTANCE_URL }}" --set-default

      - name: 'Deploy Destructive Changes (Deletes)'
        if: success()
        run: |
          if [ -f "destructive-changes/destructiveChanges.xml" ]; then
            echo "[INFO] Deploying deletions..."
            sf project deploy start --manifest destructive-changes/destructiveChanges.xml --target-org ${{ secrets.DEPLOYMENT_USER_NAME }} --test-level NoTestRun
          else
            echo "[INFO] No deletions to deploy."
          fi

      - name: 'Create delta packages'
        run: | 
          mkdir -p changed-sources
          sf sgd source delta --to "HEAD" --from "HEAD~1" --output changed-sources/ --generate-delta --source force-app/main/default/
          echo "[INFO] Diff generated"

      - name: 'Deploy to environment with local tests'
        run: |
          # Ensure changed-sources has content
          if [ -d "changed-sources/force-app/main/default" ] && [ "$(ls -A changed-sources/force-app/main/default 2>/dev/null)" ]; then
              echo "[INFO] Deploying delta changes..."
              sf project deploy start --source-dir changed-sources/force-app/main/default --target-org ${{ secrets.DEPLOYMENT_USER_NAME }} --test-level RunLocalTests
          else
              echo "[WARNING] No delta changes found. Deploying full source from force-app/..."
              sf project deploy start --source-dir force-app/ --target-org ${{ secrets.DEPLOYMENT_USER_NAME }} --test-level RunLocalTests
          fi

  Rollback-Deployment:
    if: github.event.inputs.rollback == 'true'
    needs: [Deploy-to-sffnoobs-environment]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout rollback branch'
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: 'Find latest rollback branch'
        run: |
          LATEST_ROLLBACK_BRANCH=$(git branch -r | grep 'rollback-' | sort | tail -n 1 | sed 's/origin\///')
          echo "LATEST_ROLLBACK_BRANCH=$LATEST_ROLLBACK_BRANCH" >> $GITHUB_ENV

      - name: 'Switch to latest rollback branch'
        run: |
          git checkout $LATEST_ROLLBACK_BRANCH

      - name: 'Authenticate Salesforce for Rollback'
        run: |
          echo "${{ secrets.JWT_SERVER_KEY }}" | tr -d '\r' > server.key
          sf org login jwt --username "${{ secrets.DEPLOYMENT_USER_NAME }}" --jwt-key-file server.key --client-id "${{ secrets.CONSUMER_KEY }}" --instance-url "${{ secrets.INSTANCE_URL }}" --set-default

      - name: 'Rollback Deployment'
        run: |
          echo "[INFO] Rolling back to previous deployment..."
          sf project deploy start --source-dir force-app/main/default/ --target-org ${{ secrets.DEPLOYMENT_USER_NAME }} --test-level RunLocalTests
          echo "[INFO] Rollback complete."            SFDX_RUN_TEST_LEVEL="-l RunSpecifiedTests --tests ${{ env.SFDX_SPECIFIC_TEST_FOUND }}"
          fi
          echo "SFDX_RUN_TEST_LEVEL=$SFDX_RUN_TEST_LEVEL" >> $GITHUB_ENV;
      - name: Printing specific test classes found
        run: |
          echo "Specific test classes to run: ${{ env.SFDX_RUN_TEST_LEVEL }}"

      - name: Install sfdx CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz -q
          mkdir sfdx
          tar xJf sfdx-linux-x64.tar.xz -C sfdx --strip-components 1
          echo "sfdx/bin" >> $GITHUB_PATH

      - name: Login in the environment
        env:
          DEPLOYMENT_USER: ${{ secrets.PROD_USER_ADMIN }}
          CONSUMER_KEY: ${{ secrets.PROD_CONSUMER_KEY }}
          INSTANCE_URL: ${{ secrets.PROD_INSTANCE_URL }}
          SERVER_KEY_CERTIFICATE: ${{ secrets.JWT_SERVER_KEY }}
        run: |
          mkdir -p JWT
          echo "$SERVER_KEY_CERTIFICATE" > ./JWT/connectionFile
          sf org login jwt --client-id $CONSUMER_KEY --jwt-key-file JWT/connectionFile --username $DEPLOYMENT_USER --set-default --instance-url $INSTANCE_URL --alias DeploymetOrg
          rm -rf JWT
      - name: Deploying the package file
        if: github.event.pull_request.merged == true
        run: |
          echo "Doing the real deployment in the environment"
          echo "Check CLI the version"
          sf -v

          rm -rf Deploy
          mkdir Deploy

          if [[ -z "${{ env.DESTRUCTIVE_PRE_DEPLOY }}" ]]; then
            echo "No destructive pre deployment steps defined!"
          else
            echo "Creating the destructive pre deployment for real"
            destructivePreFileName="Deploy/destructiveChangesPre.xml"
            cp "${{ env.DESTRUCTIVE_PRE_DEPLOY }}" "$destructivePreFileName"

            FINAL_DESTRUCTIVE_PRE_DEPLOY="--pre-destructive-changes $destructivePreFileName"
          fi
          echo "FINAL_DESTRUCTIVE_PRE_DEPLOY = $FINAL_DESTRUCTIVE_PRE_DEPLOY"

          if [[ -z "${{ env.DESTRUCTIVE_POS_DEPLOY }}" ]]; then
            echo "No destructive pos deployment steps defined!"
          else
            echo "Creating the destructive post deployment for real"

            destructivePosFileName="Deploy/destructiveChangesPost.xml"
            cp "${{ env.DESTRUCTIVE_POS_DEPLOY }}" "$destructivePosFileName"
            FINAL_DESTRUCTIVE_POS_DEPLOY="--post-destructive-changes $destructivePosFileName"
          fi
          echo "FINAL_DESTRUCTIVE_POS_DEPLOY = $FINAL_DESTRUCTIVE_POS_DEPLOY"

          sf project deploy start --manifest "${{ env.PACKAGE_FILE_NAME }}" -w 60 ${{ env.SFDX_RUN_TEST_LEVEL }} $FINAL_DESTRUCTIVE_PRE_DEPLOY $FINAL_DESTRUCTIVE_POS_DEPLOY
